import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

public class NeuralNet {
	//LBFGS variables
	int iflag[] = {0};
	int iprint[] = new int[2];
	int icall;
	double diag[];
	int numberOfVariables=0;
	String filePath = "C:\\NeuralNet\\";
	String loadFile = "test.txt";
	String saveFile = "test.txt";

	//Matrix descriptors
	Double[][] inputData;
	Double[][] outputData;
	int[] networkDescription;
	double complexityCostLambda = 0.0001;
	ArrayList<Double[][]> weights = new ArrayList<Double[][]>();
	ArrayList<Double[][]> gradients = new ArrayList<Double[][]>();
	
	//Normalization Helper
	double[] normalizationFactors;
	
	//Results
	Double[][] yHat;
	double cost;
	
	public static void main(String[] args)
	{
		System.out.println("Begin matrix initialization...");
//		int[] networkDescription = {729,12,6,3,1};
		int[] networkDescription = {28,15,5,1};
//		Double[][] inputData = {{0.,0.}, {3.,5.}, {5.,1.}, {10.,2.}};
//		Double[][] outputData = {{.35}, {.75}, {.82}, {.93}};
//		Double[][] inputData = {{0.1,0.1},{0.45,0.1},{0.1,0.2},{0.2,0.2},{0.35,0.2},{0.75,0.2},{0.3,0.3},{0.55,0.3},{0.7,0.3},{0.85,0.3},{0.05,0.4},{0.35,0.4},{0.45,0.4},{0.7,0.4},{0.9,0.4},{0.25,0.5},{0.6,0.5},{0.15,0.6},{0.35,0.6},{0.85,0.6},{0.05,0.7},{0.15,0.6},{0.2,0.8},{0.25,0.7},{0.45,0.8},{0.55,0.7},{0.55,0.9},{0.7,0.7},{0.7,0.9},{0.85,0.9},{0.9,0.7}};
//		Double[][] outputData = {{0.},{0.},{0.},{0.},{0.},{0.},{1.},{0.},{1.},{0.},{0.},{1.},{1.},{1.},{0.},{1.},{1.},{0.},{1.},{0.},{0.},{0.},{0.},{1.},{0.},{1.},{0.},{1.},{0.},{0.},{0.}};
		
		ImageHelper helper = new ImageHelper("data\\");
		
		Double[][] inputData = {
				{37.0000,14.0000,15.0000,0.0270,26.0000,4.0000,7.0000,9.0000,43.7500,23.4380,32.8130,2.0000,4.0000,0.5313,29.0000,16.0000,9.0000,0.1034,26.0000,9.0000,6.0000,15.0000,23.4380,43.7500,32.8130,4.0000,8.0000,0.4688},
				{34.0000,14.0000,15.0000,0.0588,25.0000,11.0000,3.0000,3.0000,35.0880,36.8420,28.0700,1.0000,2.0000,0.5263,27.0000,11.0000,3.0000,0.1111,43.0000,13.0000,10.0000,15.0000,36.8420,35.0880,28.0700,2.0000,4.0000,0.4737},
				{30.0000,11.0000,13.0000,0.0333,28.0000,4.0000,11.0000,10.0000,40.2990,29.8510,29.8510,8.0000,38.0000,0.5224,44.0000,11.0000,10.0000,0.1136,16.0000,4.0000,5.0000,13.0000,29.8510,40.2990,29.8510,7.0000,36.0000,0.4776},
				{20.0000,11.0000,13.0000,0.0500,33.0000,7.0000,2.0000,10.0000,33.7840,31.0810,35.1350,11.0000,36.0000,0.5135,32.0000,12.0000,10.0000,0.1563,19.0000,2.0000,1.0000,13.0000,31.0810,33.7840,35.1350,9.0000,24.0000,0.4865},
				{31.0000,19.0000,13.0000,0.0645,31.0000,11.0000,4.0000,9.0000,40.6780,25.4240,33.8980,1.0000,2.0000,0.4915,32.0000,9.0000,9.0000,0.1875,32.0000,8.0000,7.0000,13.0000,25.4240,40.6780,33.8980,3.0000,6.0000,0.5085},
				{27.0000,8.0000,13.0000,0.0370,11.0000,8.0000,6.0000,10.0000,27.7780,33.3330,38.8890,0.0000,0.0000,0.4167,22.0000,8.0000,10.0000,0.1364,22.0000,3.0000,4.0000,13.0000,33.3330,27.7780,38.8890,3.0000,6.0000,0.5833},
				{32.0000,12.0000,6.0000,0.0938,25.0000,14.0000,7.0000,14.0000,26.2300,34.4260,39.3440,3.0000,6.0000,0.4918,25.0000,12.0000,14.0000,0.0800,26.0000,8.0000,6.0000,6.0000,34.4260,26.2300,39.3440,3.0000,6.0000,0.5082},
				{31.0000,13.0000,13.0000,0.0968,22.0000,3.0000,7.0000,17.0000,32.0750,35.8490,32.0750,5.0000,13.0000,0.6415,24.0000,7.0000,17.0000,0.0417,14.0000,4.0000,3.0000,13.0000,35.8490,32.0750,32.0750,5.0000,13.0000,0.3585},
				{25.0000,7.0000,9.0000,0.0800,15.0000,9.0000,5.0000,12.0000,29.4120,35.2940,35.2940,3.0000,6.0000,0.3529,26.0000,16.0000,12.0000,0.0385,11.0000,6.0000,5.0000,9.0000,35.2940,29.4120,35.2940,3.0000,6.0000,0.6471},
				{24.0000,21.0000,16.0000,0.1250,23.0000,13.0000,11.0000,18.0000,37.1790,38.4620,24.3590,3.0000,6.0000,0.4872,37.0000,11.0000,18.0000,0.0000,21.0000,5.0000,11.0000,16.0000,38.4620,37.1790,24.3590,5.0000,10.0000,0.5128},
				{23.0000,13.0000,12.0000,0.1739,25.0000,8.0000,6.0000,29.0000,18.3100,39.4370,42.2540,3.0000,6.0000,0.4507,30.0000,16.0000,29.0000,0.1667,16.0000,4.0000,9.0000,12.0000,39.4370,18.3100,42.2540,3.0000,6.0000,0.5493},
				{21.0000,7.0000,4.0000,0.0476,17.0000,4.0000,8.0000,6.0000,33.3330,33.3330,33.3330,4.0000,8.0000,0.5667,30.0000,8.0000,6.0000,0.1000,20.0000,1.0000,6.0000,4.0000,33.3330,33.3330,33.3330,4.0000,8.0000,0.4333},
				{33.0000,8.0000,12.0000,0.0606,25.0000,6.0000,6.0000,8.0000,29.8510,26.8660,43.2840,3.0000,6.0000,0.5522,25.0000,5.0000,8.0000,0.1600,26.0000,3.0000,6.0000,12.0000,26.8660,29.8510,43.2840,6.0000,12.0000,0.4478},
				{22.0000,8.0000,12.0000,0.1818,24.0000,8.0000,4.0000,8.0000,36.0660,26.2300,37.7050,3.0000,6.0000,0.4590,22.0000,11.0000,8.0000,0.0000,20.0000,1.0000,0.0000,12.0000,26.2300,36.0660,37.7050,5.0000,10.0000,0.5410},
				{36.0000,14.0000,20.0000,0.0556,42.0000,10.0000,19.0000,14.0000,40.2990,25.3730,34.3280,3.0000,6.0000,0.5970,35.0000,8.0000,14.0000,0.0857,22.0000,16.0000,14.0000,20.0000,25.3730,40.2990,34.3280,1.0000,2.0000,0.4030},
				{41.0000,22.0000,10.0000,0.0244,25.0000,7.0000,3.0000,7.0000,46.9390,22.4490,30.6120,4.0000,8.0000,0.5306,22.0000,7.0000,7.0000,0.1818,29.0000,4.0000,1.0000,10.0000,22.4490,46.9390,30.6120,5.0000,10.0000,0.4694},
				{25.0000,13.0000,13.0000,0.0400,30.0000,5.0000,9.0000,10.0000,27.1190,32.2030,40.6780,2.0000,4.0000,0.5932,31.0000,13.0000,10.0000,0.1290,13.0000,4.0000,2.0000,13.0000,32.2030,27.1190,40.6780,2.0000,4.0000,0.4068},
				{21.0000,10.0000,12.0000,0.0952,33.0000,6.0000,4.0000,11.0000,32.8360,32.8360,34.3280,9.0000,37.0000,0.4478,38.0000,13.0000,11.0000,0.1053,16.0000,5.0000,5.0000,12.0000,32.8360,32.8360,34.3280,4.0000,16.0000,0.5522},
				{30.0000,5.0000,10.0000,0.2333,31.0000,2.0000,4.0000,10.0000,33.7840,31.0810,35.1350,7.0000,17.0000,0.5135,39.0000,7.0000,10.0000,0.0256,38.0000,1.0000,5.0000,10.0000,31.0810,33.7840,35.1350,9.0000,23.0000,0.4865},
				{29.0000,7.0000,5.0000,0.1724,32.0000,8.0000,8.0000,13.0000,23.7290,35.5930,40.6780,6.0000,12.0000,0.5763,39.0000,16.0000,13.0000,0.0513,32.0000,10.0000,4.0000,5.0000,35.5930,23.7290,40.6780,3.0000,6.0000,0.4237},
				{27.0000,10.0000,17.0000,0.1852,23.0000,3.0000,5.0000,16.0000,38.2350,25.0000,36.7650,4.0000,8.0000,0.5588,24.0000,10.0000,16.0000,0.1250,32.0000,4.0000,4.0000,17.0000,25.0000,38.2350,36.7650,6.0000,12.0000,0.4412},
				{47.0000,27.0000,15.0000,0.0638,19.0000,4.0000,12.0000,10.0000,37.0370,20.3700,42.5930,2.0000,4.0000,0.5000,19.0000,6.0000,10.0000,0.2105,37.0000,5.0000,7.0000,15.0000,20.3700,37.0370,42.5930,6.0000,14.0000,0.5000},
				{26.0000,3.0000,13.0000,0.0769,27.0000,9.0000,6.0000,16.0000,29.5770,40.8450,29.5770,5.0000,10.0000,0.4789,31.0000,10.0000,16.0000,0.0000,13.0000,8.0000,6.0000,13.0000,40.8450,29.5770,29.5770,2.0000,4.0000,0.5211},
				{19.0000,10.0000,14.0000,0.1579,14.0000,7.0000,10.0000,19.0000,35.8490,35.8490,28.3020,4.0000,10.0000,0.5283,32.0000,11.0000,19.0000,0.0625,19.0000,2.0000,5.0000,14.0000,35.8490,35.8490,28.3020,5.0000,10.0000,0.4717},
				{34.0000,8.0000,10.0000,0.1176,32.0000,13.0000,6.0000,14.0000,34.6150,21.1540,44.2310,2.0000,4.0000,0.5000,29.0000,13.0000,14.0000,0.0345,55.0000,15.0000,9.0000,10.0000,21.1540,34.6150,44.2310,8.0000,24.0000,0.5000},
				{28.0000,12.0000,17.0000,0.2143,17.0000,7.0000,3.0000,24.0000,35.4840,27.4190,37.0970,6.0000,15.0000,0.5000,33.0000,9.0000,24.0000,0.0909,6.0000,10.0000,4.0000,17.0000,27.4190,35.4840,37.0970,5.0000,13.0000,0.5000},
				{30.0000,11.0000,11.0000,0.0667,15.0000,13.0000,4.0000,22.0000,34.7830,37.6810,27.5360,4.0000,8.0000,0.4928,38.0000,7.0000,22.0000,0.0789,23.0000,7.0000,3.0000,11.0000,37.6810,34.7830,27.5360,6.0000,12.0000,0.5072},
				{39.0000,18.0000,22.0000,0.0513,25.0000,2.0000,4.0000,11.0000,41.0710,33.9290,25.0000,7.0000,14.0000,0.5536,28.0000,14.0000,11.0000,0.0357,22.0000,5.0000,5.0000,22.0000,33.9290,41.0710,25.0000,6.0000,12.0000,0.4464},
				{44.0000,12.0000,20.0000,0.0455,31.0000,12.0000,15.0000,17.0000,36.2070,34.4830,29.3100,1.0000,2.0000,0.4483,27.0000,13.0000,17.0000,0.0000,22.0000,12.0000,2.0000,20.0000,34.4830,36.2070,29.3100,1.0000,2.0000,0.5517},
				{21.0000,17.0000,17.0000,0.0476,32.0000,13.0000,10.0000,23.0000,41.4290,34.2860,24.2860,9.0000,18.0000,0.6000,34.0000,14.0000,23.0000,0.0882,19.0000,12.0000,13.0000,17.0000,34.2860,41.4290,24.2860,6.0000,12.0000,0.4000},
				{30.0000,9.0000,10.0000,0.1000,34.0000,5.0000,16.0000,9.0000,27.1190,27.1190,45.7630,4.0000,8.0000,0.5085,23.0000,16.0000,9.0000,0.2609,9.0000,7.0000,8.0000,10.0000,27.1190,27.1190,45.7630,4.0000,8.0000,0.4915},
				{44.0000,13.0000,16.0000,0.0909,30.0000,9.0000,18.0000,16.0000,31.3430,25.3730,43.2840,5.0000,10.0000,0.6119,24.0000,11.0000,16.0000,0.0833,42.0000,7.0000,11.0000,16.0000,25.3730,31.3430,43.2840,8.0000,16.0000,0.3881},
				{33.0000,12.0000,12.0000,0.1212,12.0000,14.0000,4.0000,7.0000,47.1700,18.8680,33.9620,4.0000,11.0000,0.4906,24.0000,9.0000,7.0000,0.0833,17.0000,5.0000,2.0000,12.0000,18.8680,47.1700,33.9620,8.0000,19.0000,0.5094},
				{33.0000,12.0000,14.0000,0.0303,31.0000,14.0000,7.0000,17.0000,37.5000,35.7140,26.7860,8.0000,18.0000,0.5000,31.0000,18.0000,17.0000,0.0000,22.0000,3.0000,3.0000,14.0000,35.7140,37.5000,26.7860,6.0000,12.0000,0.5000},
				{23.0000,5.0000,5.0000,0.0435,13.0000,9.0000,3.0000,8.0000,32.3530,33.8240,33.8240,2.0000,4.0000,0.4853,20.0000,10.0000,8.0000,0.1500,12.0000,9.0000,4.0000,5.0000,33.8240,32.3530,33.8240,2.0000,4.0000,0.5147},
				{41.0000,6.0000,13.0000,0.0244,25.0000,15.0000,14.0000,12.0000,37.5000,30.3570,32.1430,6.0000,12.0000,0.6071,29.0000,6.0000,12.0000,0.1379,22.0000,7.0000,6.0000,13.0000,30.3570,37.5000,32.1430,6.0000,12.0000,0.3929},
				{33.0000,8.0000,9.0000,0.0606,32.0000,11.0000,5.0000,9.0000,42.3080,13.4620,44.2310,1.0000,2.0000,0.5577,30.0000,10.0000,9.0000,0.1000,21.0000,4.0000,5.0000,9.0000,13.4620,42.3080,44.2310,2.0000,4.0000,0.4423},
				{31.0000,21.0000,20.0000,0.0000,22.0000,17.0000,4.0000,12.0000,33.9290,35.7140,30.3570,5.0000,10.0000,0.4643,32.0000,15.0000,12.0000,0.1563,11.0000,8.0000,4.0000,20.0000,35.7140,33.9290,30.3570,4.0000,8.0000,0.5357},
				{23.0000,19.0000,18.0000,0.0435,16.0000,18.0000,10.0000,6.0000,46.5120,23.2560,30.2330,2.0000,4.0000,0.4419,30.0000,13.0000,6.0000,0.1333,23.0000,6.0000,11.0000,18.0000,23.2560,46.5120,30.2330,4.0000,8.0000,0.5581},
				{24.0000,16.0000,17.0000,0.1250,26.0000,6.0000,9.0000,10.0000,31.5790,33.3330,35.0880,3.0000,6.0000,0.4561,21.0000,13.0000,10.0000,0.0476,11.0000,4.0000,4.0000,17.0000,33.3330,31.5790,35.0880,3.0000,6.0000,0.5439},
				{52.0000,10.0000,25.0000,0.0769,16.0000,24.0000,8.0000,13.0000,49.1800,18.0330,32.7870,2.0000,4.0000,0.6230,28.0000,7.0000,13.0000,0.0714,20.0000,14.0000,14.0000,25.0000,18.0330,49.1800,32.7870,5.0000,10.0000,0.3770},
				{18.0000,11.0000,17.0000,0.1667,14.0000,11.0000,5.0000,19.0000,30.3570,37.5000,32.1430,1.0000,2.0000,0.3571,28.0000,10.0000,19.0000,0.1429,18.0000,11.0000,1.0000,17.0000,37.5000,30.3570,32.1430,4.0000,8.0000,0.6429},
				{15.0000,22.0000,17.0000,0.0000,25.0000,11.0000,3.0000,8.0000,43.3960,33.9620,22.6420,5.0000,13.0000,0.5094,26.0000,8.0000,8.0000,0.1154,22.0000,7.0000,5.0000,17.0000,33.9620,43.3960,22.6420,4.0000,11.0000,0.4906},
				{41.0000,12.0000,13.0000,0.0732,21.0000,2.0000,3.0000,8.0000,35.7140,30.0000,34.2860,4.0000,11.0000,0.5714,27.0000,11.0000,8.0000,0.2593,11.0000,0.0000,3.0000,13.0000,30.0000,35.7140,34.2860,6.0000,15.0000,0.4286},
				{29.0000,14.0000,14.0000,0.1034,28.0000,3.0000,3.0000,17.0000,32.1430,37.5000,30.3570,5.0000,10.0000,0.4643,30.0000,15.0000,17.0000,0.0000,27.0000,8.0000,5.0000,14.0000,37.5000,32.1430,30.3570,5.0000,10.0000,0.5357},
				{22.0000,15.0000,9.0000,0.0909,16.0000,3.0000,9.0000,10.0000,30.1890,32.0750,37.7360,2.0000,4.0000,0.4717,25.0000,10.0000,10.0000,0.2400,6.0000,1.0000,9.0000,9.0000,32.0750,30.1890,37.7360,3.0000,8.0000,0.5283},
				{37.0000,9.0000,8.0000,0.0000,23.0000,11.0000,7.0000,15.0000,43.5480,25.8060,30.6450,7.0000,17.0000,0.5645,29.0000,9.0000,15.0000,0.1379,15.0000,11.0000,6.0000,8.0000,25.8060,43.5480,30.6450,4.0000,11.0000,0.4355},
				{28.0000,7.0000,13.0000,0.1429,43.0000,14.0000,14.0000,12.0000,25.8060,40.3230,33.8710,3.0000,6.0000,0.5000,47.0000,17.0000,12.0000,0.0638,33.0000,11.0000,12.0000,13.0000,40.3230,25.8060,33.8710,3.0000,6.0000,0.5000},
				{36.0000,9.0000,10.0000,0.0556,23.0000,6.0000,8.0000,16.0000,36.5080,30.1590,33.3330,4.0000,11.0000,0.4762,22.0000,14.0000,16.0000,0.0000,29.0000,4.0000,6.0000,10.0000,30.1590,36.5080,33.3330,4.0000,11.0000,0.5238},
				{24.0000,14.0000,16.0000,0.1667,29.0000,16.0000,7.0000,19.0000,30.4350,30.4350,39.1300,1.0000,2.0000,0.5000,27.0000,9.0000,19.0000,0.0370,16.0000,6.0000,5.0000,16.0000,30.4350,30.4350,39.1300,2.0000,4.0000,0.5000},
				{32.0000,10.0000,13.0000,0.0938,17.0000,21.0000,5.0000,17.0000,39.4370,33.8030,26.7610,6.0000,12.0000,0.5352,25.0000,16.0000,17.0000,0.0000,28.0000,11.0000,8.0000,13.0000,33.8030,39.4370,26.7610,6.0000,12.0000,0.4648},
				{33.0000,23.0000,14.0000,0.0909,24.0000,4.0000,6.0000,8.0000,46.4290,16.0710,37.5000,4.0000,19.0000,0.6607,22.0000,7.0000,8.0000,0.2273,21.0000,2.0000,6.0000,14.0000,16.0710,46.4290,37.5000,3.0000,6.0000,0.3393},
				{29.0000,14.0000,5.0000,0.1034,31.0000,4.0000,4.0000,9.0000,35.2940,38.2350,26.4710,6.0000,12.0000,0.5735,26.0000,7.0000,9.0000,0.0769,29.0000,1.0000,4.0000,5.0000,38.2350,35.2940,26.4710,5.0000,10.0000,0.4265},
				{26.0000,8.0000,17.0000,0.0769,29.0000,13.0000,8.0000,13.0000,33.8710,32.2580,33.8710,4.0000,8.0000,0.5645,29.0000,13.0000,13.0000,0.1379,31.0000,15.0000,4.0000,17.0000,32.2580,33.8710,33.8710,5.0000,10.0000,0.4355},
				{30.0000,13.0000,15.0000,0.1000,22.0000,6.0000,4.0000,8.0000,31.9440,26.3890,41.6670,8.0000,24.0000,0.5833,24.0000,9.0000,8.0000,0.1667,21.0000,4.0000,4.0000,15.0000,26.3890,31.9440,41.6670,8.0000,16.0000,0.4167},
				{27.0000,11.0000,13.0000,0.1111,43.0000,11.0000,7.0000,12.0000,30.1370,35.6160,34.2470,2.0000,4.0000,0.4110,34.0000,13.0000,12.0000,0.1765,29.0000,3.0000,5.0000,13.0000,35.6160,30.1370,34.2470,5.0000,10.0000,0.5890},
				{20.0000,7.0000,11.0000,0.1500,17.0000,8.0000,5.0000,6.0000,25.9260,35.1850,38.8890,3.0000,6.0000,0.4259,36.0000,14.0000,6.0000,0.1389,17.0000,1.0000,4.0000,11.0000,35.1850,25.9260,38.8890,2.0000,4.0000,0.5741},
				{30.0000,9.0000,18.0000,0.1000,17.0000,13.0000,6.0000,10.0000,47.4580,23.7290,28.8140,2.0000,4.0000,0.5254,20.0000,10.0000,10.0000,0.0500,15.0000,11.0000,1.0000,18.0000,23.7290,47.4580,28.8140,3.0000,8.0000,0.4746},
				{34.0000,17.0000,10.0000,0.0882,15.0000,8.0000,3.0000,10.0000,26.2300,36.0660,37.7050,5.0000,13.0000,0.5082,32.0000,12.0000,10.0000,0.1250,11.0000,8.0000,3.0000,10.0000,36.0660,26.2300,37.7050,5.0000,15.0000,0.4918},
				{35.0000,16.0000,41.0000,0.0000,20.0000,13.0000,3.0000,12.0000,47.6190,26.9840,25.3970,4.0000,8.0000,0.5079,25.0000,7.0000,12.0000,0.1200,21.0000,14.0000,6.0000,41.0000,26.9840,47.6190,25.3970,7.0000,14.0000,0.4921},
				{37.0000,23.0000,14.0000,0.0541,26.0000,8.0000,1.0000,8.0000,38.3330,30.0000,31.6670,5.0000,10.0000,0.4833,26.0000,12.0000,8.0000,0.0385,27.0000,7.0000,2.0000,14.0000,30.0000,38.3330,31.6670,4.0000,8.0000,0.5167},
				{41.0000,11.0000,17.0000,0.0976,18.0000,6.0000,7.0000,12.0000,41.9350,25.8060,32.2580,3.0000,6.0000,0.5161,22.0000,10.0000,12.0000,0.0455,19.0000,18.0000,1.0000,17.0000,25.8060,41.9350,32.2580,5.0000,10.0000,0.4839},
				{22.0000,21.0000,12.0000,0.0909,29.0000,6.0000,3.0000,8.0000,43.1370,31.3730,25.4900,3.0000,6.0000,0.4902,32.0000,7.0000,8.0000,0.0313,26.0000,8.0000,9.0000,12.0000,31.3730,43.1370,25.4900,4.0000,8.0000,0.5098},
				{26.0000,12.0000,10.0000,0.0769,36.0000,5.0000,2.0000,13.0000,23.6360,34.5450,41.8180,3.0000,6.0000,0.4909,37.0000,8.0000,13.0000,0.1081,23.0000,6.0000,1.0000,10.0000,34.5450,23.6360,41.8180,2.0000,4.0000,0.5091},
				{33.0000,10.0000,12.0000,0.0606,21.0000,9.0000,7.0000,12.0000,37.7050,34.4260,27.8690,5.0000,10.0000,0.4426,27.0000,13.0000,12.0000,0.0370,32.0000,1.0000,3.0000,12.0000,34.4260,37.7050,27.8690,5.0000,10.0000,0.5574},
				{34.0000,10.0000,10.0000,0.1176,19.0000,15.0000,15.0000,19.0000,40.0000,30.0000,30.0000,5.0000,10.0000,0.4833,19.0000,7.0000,19.0000,0.0526,16.0000,12.0000,7.0000,10.0000,30.0000,40.0000,30.0000,3.0000,6.0000,0.5167},
				{34.0000,10.0000,14.0000,0.1765,30.0000,7.0000,10.0000,12.0000,36.9230,29.2310,33.8460,1.0000,2.0000,0.5692,25.0000,12.0000,12.0000,0.1200,17.0000,12.0000,11.0000,14.0000,29.2310,36.9230,33.8460,3.0000,6.0000,0.4308},
				{30.0000,10.0000,20.0000,0.1333,25.0000,8.0000,7.0000,10.0000,45.8330,27.0830,27.0830,5.0000,13.0000,0.5625,23.0000,6.0000,10.0000,0.0435,45.0000,8.0000,6.0000,20.0000,27.0830,45.8330,27.0830,8.0000,19.0000,0.4375},
				{24.0000,10.0000,19.0000,0.0833,21.0000,6.0000,5.0000,20.0000,40.7890,32.8950,26.3160,5.0000,13.0000,0.4342,28.0000,15.0000,20.0000,0.1786,14.0000,6.0000,8.0000,19.0000,32.8950,40.7890,26.3160,5.0000,13.0000,0.5658},
				{23.0000,10.0000,23.0000,0.1304,19.0000,4.0000,6.0000,17.0000,28.3330,33.3330,38.3330,7.0000,17.0000,0.5167,43.0000,13.0000,17.0000,0.1163,32.0000,5.0000,4.0000,23.0000,33.3330,28.3330,38.3330,5.0000,13.0000,0.4833},
				{27.0000,13.0000,18.0000,0.0370,28.0000,17.0000,9.0000,6.0000,32.6090,28.2610,39.1300,4.0000,11.0000,0.5652,24.0000,12.0000,6.0000,0.0833,30.0000,10.0000,4.0000,18.0000,28.2610,32.6090,39.1300,3.0000,9.0000,0.4348},
				{29.0000,12.0000,9.0000,0.0690,30.0000,12.0000,6.0000,9.0000,40.2780,31.9440,27.7780,8.0000,16.0000,0.4444,41.0000,6.0000,9.0000,0.0976,21.0000,13.0000,7.0000,9.0000,31.9440,40.2780,27.7780,10.0000,20.0000,0.5556},
				{22.0000,15.0000,10.0000,0.1818,20.0000,11.0000,4.0000,20.0000,28.5710,54.2860,17.1430,1.0000,2.0000,0.4714,35.0000,21.0000,20.0000,0.0286,20.0000,11.0000,6.0000,10.0000,54.2860,28.5710,17.1430,2.0000,4.0000,0.5286},
				{34.0000,13.0000,9.0000,0.0294,25.0000,17.0000,5.0000,6.0000,41.3040,19.5650,39.1300,2.0000,4.0000,0.6739,24.0000,7.0000,6.0000,0.0833,20.0000,4.0000,9.0000,9.0000,19.5650,41.3040,39.1300,2.0000,4.0000,0.3261},
				{40.0000,17.0000,22.0000,0.0500,21.0000,16.0000,4.0000,10.0000,44.2620,31.1480,24.5900,9.0000,32.0000,0.5902,23.0000,7.0000,10.0000,0.0435,31.0000,3.0000,1.0000,22.0000,31.1480,44.2620,24.5900,7.0000,28.0000,0.4098},
				{28.0000,12.0000,10.0000,0.1429,21.0000,7.0000,8.0000,21.0000,36.0000,36.0000,28.0000,2.0000,4.0000,0.4000,22.0000,6.0000,21.0000,0.0000,27.0000,6.0000,9.0000,10.0000,36.0000,36.0000,28.0000,1.0000,2.0000,0.6000},
				{25.0000,8.0000,4.0000,0.1200,19.0000,5.0000,3.0000,10.0000,33.3330,31.8180,34.8480,6.0000,15.0000,0.4848,20.0000,11.0000,10.0000,0.1000,12.0000,2.0000,4.0000,4.0000,31.8180,33.3330,34.8480,3.0000,9.0000,0.5152},
				{35.0000,12.0000,12.0000,0.0286,37.0000,13.0000,1.0000,17.0000,42.8570,25.3970,31.7460,5.0000,10.0000,0.5238,32.0000,13.0000,17.0000,0.0625,30.0000,7.0000,7.0000,12.0000,25.3970,42.8570,31.7460,6.0000,12.0000,0.4762},
				{35.0000,10.0000,14.0000,0.0857,31.0000,8.0000,5.0000,11.0000,39.1890,32.4320,28.3780,2.0000,4.0000,0.5405,33.0000,12.0000,11.0000,0.0606,31.0000,6.0000,0.0000,14.0000,32.4320,39.1890,28.3780,3.0000,6.0000,0.4595},
				{37.0000,14.0000,28.0000,0.0000,39.0000,4.0000,4.0000,8.0000,38.4620,30.7690,30.7690,4.0000,11.0000,0.6154,29.0000,10.0000,8.0000,0.1379,26.0000,4.0000,4.0000,28.0000,30.7690,38.4620,30.7690,9.0000,21.0000,0.3846},
				{36.0000,8.0000,12.0000,0.0833,25.0000,18.0000,10.0000,18.0000,36.0000,41.3330,22.6670,4.0000,11.0000,0.4800,38.0000,9.0000,18.0000,0.0000,46.0000,14.0000,8.0000,12.0000,41.3330,36.0000,22.6670,4.0000,19.0000,0.5200},
				{19.0000,9.0000,15.0000,0.1053,15.0000,11.0000,12.0000,14.0000,29.6880,29.6880,40.6250,3.0000,6.0000,0.4688,30.0000,15.0000,14.0000,0.2000,16.0000,5.0000,8.0000,15.0000,29.6880,29.6880,40.6250,2.0000,4.0000,0.5313},
				{30.0000,7.0000,17.0000,0.1333,28.0000,13.0000,11.0000,6.0000,33.3330,31.5790,35.0880,4.0000,19.0000,0.4211,37.0000,10.0000,6.0000,0.1351,38.0000,4.0000,6.0000,17.0000,31.5790,33.3330,35.0880,3.0000,8.0000,0.5789},
				{28.0000,7.0000,8.0000,0.1071,13.0000,12.0000,8.0000,24.0000,25.8620,36.2070,37.9310,5.0000,10.0000,0.4138,29.0000,17.0000,24.0000,0.0345,17.0000,6.0000,3.0000,8.0000,36.2070,25.8620,37.9310,2.0000,4.0000,0.5862},
				{26.0000,9.0000,17.0000,0.0000,10.0000,2.0000,7.0000,15.0000,33.3330,44.4440,22.2220,5.0000,10.0000,0.5370,19.0000,13.0000,15.0000,0.0526,8.0000,1.0000,8.0000,17.0000,44.4440,33.3330,22.2220,4.0000,8.0000,0.4630},
				{27.0000,6.0000,15.0000,0.1481,26.0000,5.0000,9.0000,5.0000,32.8570,31.4290,35.7140,3.0000,6.0000,0.6000,35.0000,12.0000,5.0000,0.0286,20.0000,5.0000,4.0000,15.0000,31.4290,32.8570,35.7140,3.0000,6.0000,0.4000},
				{34.0000,6.0000,20.0000,0.0294,33.0000,9.0000,3.0000,13.0000,43.6620,30.9860,25.3520,3.0000,6.0000,0.4930,23.0000,13.0000,13.0000,0.1739,16.0000,2.0000,3.0000,20.0000,30.9860,43.6620,25.3520,6.0000,23.0000,0.5070},
				{29.0000,5.0000,12.0000,0.1724,22.0000,7.0000,3.0000,17.0000,24.5900,44.2620,31.1480,5.0000,10.0000,0.4262,28.0000,10.0000,17.0000,0.0357,20.0000,3.0000,5.0000,12.0000,44.2620,24.5900,31.1480,5.0000,10.0000,0.5738},
				{23.0000,11.0000,15.0000,0.1304,18.0000,8.0000,8.0000,11.0000,31.9440,44.4440,23.6110,2.0000,4.0000,0.5694,29.0000,15.0000,11.0000,0.0690,22.0000,1.0000,2.0000,15.0000,44.4440,31.9440,23.6110,2.0000,4.0000,0.4306},
				{27.0000,10.0000,15.0000,0.1111,15.0000,7.0000,4.0000,8.0000,41.5580,24.6750,33.7660,3.0000,8.0000,0.4935,18.0000,6.0000,8.0000,0.1111,30.0000,8.0000,5.0000,15.0000,24.6750,41.5580,33.7660,8.0000,16.0000,0.5065},
				{25.0000,12.0000,13.0000,0.0800,12.0000,3.0000,6.0000,5.0000,30.4350,36.9570,32.6090,2.0000,4.0000,0.6522,35.0000,6.0000,5.0000,0.0857,11.0000,2.0000,5.0000,13.0000,36.9570,30.4350,32.6090,3.0000,6.0000,0.3478},
				{40.0000,10.0000,13.0000,0.0250,20.0000,14.0000,8.0000,18.0000,42.4660,21.9180,35.6160,4.0000,8.0000,0.5616,29.0000,13.0000,18.0000,0.1379,20.0000,10.0000,5.0000,13.0000,21.9180,42.4660,35.6160,6.0000,12.0000,0.4384},
				{36.0000,11.0000,14.0000,0.0556,20.0000,9.0000,3.0000,14.0000,37.8790,33.3330,28.7880,3.0000,6.0000,0.4091,26.0000,11.0000,14.0000,0.2692,11.0000,4.0000,0.0000,14.0000,33.3330,37.8790,28.7880,4.0000,8.0000,0.5909},
				{26.0000,6.0000,17.0000,0.1154,36.0000,14.0000,13.0000,24.0000,38.4620,32.6920,28.8460,3.0000,9.0000,0.5192,26.0000,12.0000,24.0000,0.1923,46.0000,8.0000,7.0000,17.0000,32.6920,38.4620,28.8460,3.0000,9.0000,0.4808},
				{36.0000,19.0000,12.0000,0.0833,25.0000,11.0000,5.0000,14.0000,39.0630,25.0000,35.9380,4.0000,8.0000,0.4688,31.0000,9.0000,14.0000,0.1290,14.0000,15.0000,3.0000,12.0000,25.0000,39.0630,35.9380,3.0000,6.0000,0.5313},
				{40.0000,13.0000,16.0000,0.0750,11.0000,5.0000,5.0000,21.0000,35.4840,32.2580,32.2580,6.0000,15.0000,0.4839,29.0000,8.0000,21.0000,0.0690,12.0000,2.0000,4.0000,16.0000,32.2580,35.4840,32.2580,5.0000,13.0000,0.5161},
				{23.0000,16.0000,16.0000,0.1739,23.0000,10.0000,4.0000,12.0000,37.0970,20.9680,41.9350,4.0000,8.0000,0.4839,26.0000,11.0000,12.0000,0.2692,17.0000,8.0000,2.0000,16.0000,20.9680,37.0970,41.9350,6.0000,12.0000,0.5161},
				{28.0000,10.0000,12.0000,0.1071,19.0000,10.0000,3.0000,12.0000,30.3030,42.4240,27.2730,5.0000,10.0000,0.3788,40.0000,11.0000,12.0000,0.0000,19.0000,7.0000,1.0000,12.0000,42.4240,30.3030,27.2730,3.0000,6.0000,0.6212},
				{30.0000,13.0000,21.0000,0.1000,10.0000,12.0000,14.0000,18.0000,36.5080,25.3970,38.0950,1.0000,2.0000,0.5873,15.0000,9.0000,18.0000,0.0000,22.0000,7.0000,4.0000,21.0000,25.3970,36.5080,38.0950,4.0000,8.0000,0.4127},
				{29.0000,7.0000,11.0000,0.1034,20.0000,10.0000,6.0000,16.0000,32.2030,32.2030,35.5930,2.0000,4.0000,0.5932,28.0000,17.0000,16.0000,0.1429,21.0000,1.0000,4.0000,11.0000,32.2030,32.2030,35.5930,5.0000,10.0000,0.4068}
		};
		
		Double[][] outputData = {
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{1.0},
				{1.0},
				{0.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{1.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{0.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{1.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{0.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{1.0},
				{0.0},
				{1.0},
				{0.0},
				{0.0},
				{1.0},
				{0.0},
				{1.0},
				{0.0},
				{1.0},
				{1.0},
				{1.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{0.0},
				{1.0},
				{0.0},
				{1.0},
				{1.0},
				{0.0}
		};
		
//		Double[][] inputData = {
//				helper.extractBytes("eight1.png"),
//				helper.extractBytes("eight2.png"),
//				helper.extractBytes("one1.png"),
//				helper.extractBytes("five1.png"),
//				helper.extractBytes("eight3.png"),
//				helper.extractBytes("eight5.png"),
//				helper.extractBytes("eight6.png"),
//				helper.extractBytes("nine1.png"),
//				helper.extractBytes("zero1.png"),
//				helper.extractBytes("eight7.png"),
//				helper.extractBytes("eight8.png"),
//				helper.extractBytes("eight10.png"),
//				helper.extractBytes("eight11.png"),
//				helper.extractBytes("eight12.png"),
//				helper.extractBytes("eight14.png"),
//				helper.extractBytes("four2.png"),
//				helper.extractBytes("four3.png"),
//				helper.extractBytes("eight4.png"),
//				helper.extractBytes("four1.png"),
//				helper.extractBytes("black.png"),
//				helper.extractBytes("six2.png"),
//				helper.extractBytes("six3.png"),
//				helper.extractBytes("six4.png"),
//				helper.extractBytes("six5.png")
//		};
//		Double[][] outputData = {
//				{1.},
//				{1.},
//				{0.},
//				{0.},
//				{1.},
//				{1.},
//				{1.},
//				{0.},
//				{0.},
//				{1.},
//				{1.},
//				{1.},
//				{1.},
//				{1.},
//				{1.},
//				{0.},
//				{0.},
//				{1.},
//				{0.},
//				{0.},
//				{0.},
//				{0.},
//				{0.},
//				{0.}
//		};
		
		Double[][] testData = {
//				helper.extractBytes("eight16.png"),
//				helper.extractBytes("six1.png")
//				{8.,3.}
				{29.646,10.707,10.707,9.81,23.246,9.23,6.938,14.062,32.8,34.3,32.8,4.277,10.,47.9,28.225,11.016,10.5,7.,21.935,6.88,7.355,13.435,33.3,36.2,30.5,3.85,10.468,47.3}
		};
		
		NeuralNet NN = new NeuralNet(networkDescription, inputData, outputData, "SecondPass_3-4-2017-28_15_5_1.txt", "WPGCOLRealPass_3-4-2017-28_15_5_1.txt");
//		NeuralNet NN = new NeuralNet(networkDescription, inputData, outputData, "2_729.11.7.5.1.txt", "2_729.11.7.5.1.txt");

//		NN.saveWeights();
		testData = NN.normalizeMatrix(testData);
		
		NN.calculateForwardProp();
		double cost = NN.calculateCostFunction(NN.outputData, NN.yHat);
		
		NN.calculateCostFunctionPrimes();
		printMatrix(NN.yHat);
		
		double cost2 = NN.cost;

		double[] unraveledWeights = NN.unravel(NN.weights);
		double[] unraveledGradient = NN.unravel(NN.gradients);
		System.out.println("Beginning Back propogation...");
		try {

			do
			{
				LBFGS.lbfgs(NN.numberOfVariables, 300, unraveledWeights, cost2, unraveledGradient, false, NN.diag, NN.iprint, 1.0e-4, 1.0e-17, NN.iflag);
				NN.reravel(unraveledWeights, NN.weights);
				NN.calculateForwardProp();
				NN.calculateCostFunctionPrimes();
				NN.calculateCostFunction(NN.outputData, NN.yHat);
				cost2 = NN.cost;
				unraveledGradient = NN.unravel(NN.gradients);
				NN.printMatrix(NN.yHat);
		
			} while(NN.iflag[0] != 0);

		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("error");
		}
		
		System.out.println("Saving Weights...");
		NN.saveWeights();
		NN.inputData = testData;
		System.out.println("Calculating our guess...");
		NN.calculateForwardProp();
		System.out.println("******");
		printMatrix(NN.yHat);
	}
	
	public NeuralNet()
	{
		iprint [ 1 -1] = 1;
		iprint [ 2 -1] = 0;
		iprint [ 0] = 1;

		iflag[0] = 0;
		icall = 0;
	}

	public NeuralNet(int[] networkDescription, Double[][] inputData, Double[][] outputData)
	{
		//Setup for LBFGS algorithm
		this();
		
		//Begin initialization of network
		this.inputData = inputData;
		this.outputData = outputData;
		this.networkDescription = networkDescription;
		

		//Normalize Weights
		normalizeMatrix(this.inputData);
		
		//Initialize Weights
		initializeValuesInMatrix(true, weights);
		
		//Initialize Gradients
		initializeValuesInMatrix(false, gradients);
		
		for(int i = 0; i < networkDescription.length - 1; i++)
		{
			numberOfVariables += (networkDescription[i] * networkDescription[i+1]);
		}
		diag = new double [ numberOfVariables ];
	}
	
	public NeuralNet(int[] networkDescription, Double[][] inputData, Double[][] outputData, String saveFile)
	{
		this(networkDescription, inputData, outputData);
		//Begin initialization of network
		this.saveFile = saveFile;
		
	}
	
	public NeuralNet(int[] networkDescription, Double[][] inputData, Double[][] outputData, String loadFile, String saveFile)
	{
		
		//Setup for LBFGS algorithm
		this();
		
		//Begin initialization of network
		this.inputData = inputData;
		this.outputData = outputData;
		this.networkDescription = networkDescription;
		this.loadFile = loadFile;
		this.saveFile = saveFile;
		File weightInitiatorPath = new File(filePath + loadFile);
		
		//Normalize Weights
		normalizeMatrix(this.inputData);
		
		//Read from file and initialize weights
		try(BufferedReader br = new BufferedReader(new FileReader(weightInitiatorPath))) {
			StringBuilder sb = new StringBuilder();
		    String line = br.readLine();
		    String[] splitter = line.split(" ");
		    networkDescription = new int[splitter.length];
		    for(int i = 0; i < splitter.length; i++)
		    {
		    	networkDescription[i] = Integer.parseInt(splitter[i]);
		    }
		    line = br.readLine();
		    line = br.readLine();
		    int counter = 0;
		    int seperatorsFound = 0;
		    while (!line.equals("EOF") && line != null) {
		    	
		    	Double[][] tempWeights = new Double[networkDescription[seperatorsFound]][networkDescription[seperatorsFound+1]];
		    	System.out.println("Matrix Initialized: " + tempWeights.length + " x " + tempWeights[0].length);
		    	
		    	while (!line.equals("EOF") && !line.equals("----") && line != null) {
				    String[] matrixSplitter = line.split(" ");
				    
				    for(int i = 0; i < matrixSplitter.length; i++)
				    {
				    	tempWeights[counter][i] = Double.parseDouble(matrixSplitter[i]);
				    }
				    counter++;
					

			        line = br.readLine();
			        if(line.equals("----"))
			        {
			        	seperatorsFound++;
			        	weights.add(tempWeights);
			        }

		    	}
		    	counter=0;
		        line = br.readLine();
		    }
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		
		//Initialize Gradients
		initializeValuesInMatrix(false, gradients);
		
		for(int i = 0; i < networkDescription.length - 1; i++)
		{
			numberOfVariables += (networkDescription[i] * networkDescription[i+1]);
		}
		diag = new double [ numberOfVariables ];
	}
	
	public Double[][] normalizeMatrix(Double[][] normalizingMatrix)
	{
		System.out.println("Normalizing Data...");
		//Find Max Value. If already found, then skip
		double[] maxOfColumn;
		if(normalizationFactors == null)
		{
			maxOfColumn = new double[normalizingMatrix[0].length];
			for(int i = 0; i < normalizingMatrix.length; i++)
			{
				for(int j = 0; j < normalizingMatrix[i].length; j++)
				{
					if(maxOfColumn[j] < normalizingMatrix[i][j])
						maxOfColumn[j] = normalizingMatrix[i][j];
				}
			}
			normalizationFactors = maxOfColumn;
		}
		
		for(int i = 0; i < normalizingMatrix.length; i++)
		{
			for(int j = 0; j < normalizingMatrix[i].length; j++)
			{
				normalizingMatrix[i][j] = normalizingMatrix[i][j]/normalizationFactors[j];
			}
		}
		
		return normalizingMatrix;
	}
	
	
	private void initializeValuesInMatrix(boolean isRandom, ArrayList<Double[][]> initializeItems)
	{
		System.out.println("Initializing Weights...");
		for(int i = 0; i < networkDescription.length - 1; i++)
		{
			Double[][] tempLayer = new Double[networkDescription[i]][networkDescription[i+1]];
			for(int x = 0; x < networkDescription[i]; x++)
			{
				for(int y = 0; y < networkDescription[i+1]; y++)
				{
					if(isRandom)
					{
						double randomNum = Math.random()*2-1;
						int curWeightInt = ((int)(randomNum * 1000));
						double curWeight = curWeightInt/1000.0;
						tempLayer[x][y] = curWeight;
					}
					else
					{
						tempLayer[x][y] = 0.0;
					}
				}
			}
			initializeItems.add(tempLayer);
			printMatrix(tempLayer);
		}
	}
	
	public void calculateForwardProp()
	{
		Double[][] a = inputData;
		for(int i = 0; i < networkDescription.length - 1; i++)
		{
			Double[][] z = new Double[a.length][weights.get(i)[0].length];
			z = NeuralMatrix.multiply(a, weights.get(i));
			a = NeuralMatrix.applySigmoid(z);
		}
		yHat = a;
	}

	public double calculateCostFunction(Double[][] Y, Double[][] yHat)
	{
		//Calculate weight complexity
		double complexityCost = this.calculateWeightComplexity();
		
		//Calculate the yHat - Y, square it, then half it (1/2) (y-yHat)^2
		Double[][] costResultMatrix = NeuralMatrix.subtract(Y, yHat);
		costResultMatrix = NeuralMatrix.multiplyVector(costResultMatrix, costResultMatrix);
		double answerCost = NeuralMatrix.sumVector(costResultMatrix)/2;
		
		//Sum our MatrixCost and our weightCost
		this.cost = answerCost + complexityCost;
		
		return this.cost;
	}
	
	public double calculateWeightComplexity()
	{
		double weightComplexity = 0.0;
		for(int i = 0; i < this.weights.size(); i++)
		{
			Double[][] curWeightLayer = this.weights.get(i);
			for(int x = 0; x < curWeightLayer.length; x++)
			{
				for(int y = 0; y < curWeightLayer[0].length; y++)
				{
					weightComplexity += (curWeightLayer[x][y]) * (curWeightLayer[x][y]);
				}
			}
		}
		weightComplexity = weightComplexity * (complexityCostLambda/2.0);
		return weightComplexity;
	}

	public double[] unravel(ArrayList<Double[][]> unravelItems)
	{
		ArrayList<Double> myList = new ArrayList<Double>();
		for(int i = 0; i < unravelItems.size(); i++)
		{
			Double[][] curWeightLayer = unravelItems.get(i);
			for(int x = 0; x < curWeightLayer.length; x++)
			{
				for(int y = 0; y < curWeightLayer[0].length; y++)
				{
					myList.add(curWeightLayer[x][y]);
				}
			}
		}
		
		Double[] unraveledList = new Double[myList.size()];
		unraveledList = myList.toArray(unraveledList);
		double[] d = new double[myList.size()];
		for(int i = 0; i < myList.size(); i++)
		{
			d[i] = unraveledList[i];
		}
		return d;
	}
	
	public void reravel(double[] d, ArrayList<Double[][]> reravelItem)
	{
		int dPosition = 0;
		for(int i = 0; i < reravelItem.size(); i++)
		{
			Double[][] curWeightLayer = reravelItem.get(i);
			for(int x = 0; x < curWeightLayer.length; x++)
			{
				for(int y = 0; y < curWeightLayer[0].length; y++)
				{
					curWeightLayer[x][y] = d[dPosition];
					dPosition++;
				}
			}
			reravelItem.set(i, curWeightLayer);
		}
		
	}
	
	public void calculateCostFunctionPrimes()
	{
		double epsilon = .00000001;

		double[] unraveled = this.unravel(weights);
		double[] gradient = new double[unraveled.length];
		
		//We come into this method with varying weights from the original set sometimes.  Therefore, calculate the cost and store it.
		calculateForwardProp();
		this.calculateCostFunction(outputData, yHat);
		double origCost = this.cost;

		System.out.println("unraveled length: " + unraveled.length);
		for(int i = 0; i < unraveled.length; i++)
		{
			unraveled[i] = unraveled[i] + epsilon;
			this.reravel(unraveled, this.weights);
			calculateForwardProp();
			this.calculateCostFunction(outputData, yHat);
			double pCost = this.cost;

			gradient[i] = (pCost - origCost) / (epsilon);

			unraveled[i] = unraveled[i] - epsilon;
			this.reravel(unraveled, this.weights);
		}
		this.reravel(gradient, this.gradients);
	}
		
	public static void printMatrix(Double[][] a)
	{
        for (int i = 0; i < a.length; i++)
        {
            for (int j = 0; j < a[0].length; j++)
            {
                System.out.print(a[i][j] + ", ");
            }
            System.out.println();
        }
	}
	
	public void saveWeights()
	{
		try(  PrintWriter out = new PrintWriter( this.filePath + this.saveFile )  ){
			String networkDescriptionString = "";
			for(int i = 0; i < networkDescription.length; i++)
			{
				networkDescriptionString += networkDescription[i] + " ";
			}
			
			ArrayList<String> weightsString = new ArrayList<String>();
			for(int i = 0; i < weights.size(); i++)
			{
				Double[][] d = weights.get(i);
				for(int x = 0; x < d.length; x++)
				{
					Double[] dx = d[x];
					String curWeightLine = "";
					for(int y = 0; y < dx.length; y++)
					{
						curWeightLine += dx[y] + " ";
					}
					weightsString.add(curWeightLine);
				}
				weightsString.add("----");
			}
			
			out.println(networkDescriptionString);
			out.println("----");
		    for(String s : weightsString)
		    {
		    	out.println(s);
		    }
		    out.println("EOF");
		    System.out.println("File save completed");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
	}
	

}
